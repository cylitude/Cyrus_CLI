We can start off by going to our Project Folder

Copy the code below to see the main page of the CLI Program
>> python -m linked_cli.cli --help
From here, you will be able to see the general instructions of how to use this program.

Test Case 1
>> python -m linked_cli.cli --help

It tests the functionality of the 'help' text, which prints the usage/flag description and exits for us 

Test Case 2 (Generating without Seed, non-reproducible)
>> python -m linked_cli.cli -g 5

It generates 5 items for us that is placed in our "__pycache__". "Generated 5 items" is printed.

Test Case 3 
>> python -m linked_cli.cli -s Pikachu

It generates a statement that says "No item named Pikachu" since we are searching on an empty list

Test Case 4
>> python -m linked_cli.cli -o asc

It generates "Items sorted by date (ascending):" and nothing else, since we are sorting on an empty list 

Test Case 5.1
>> python -m linked_cli.cli -g 3 -o asc

It generates + sorts, hence there will be 3 rows of sorted output, where the items are sorted by date, in ascending order

Test Case 5.2
>> python -m linked_cli.cli -g 3 -o desc

It generates + sorts, hence there will be 3 rows of sorted output, where the items are sorted by date, in descending order

Test Case 6 (Generate and search in one shot, without Seed)
>> python -m linked_cli.cli -g 3 -s fsfvtB

If "fsfvtB" happens to be one of the 3 that is generated, it will print that JSON line. Otherwise, "No item named fsfvtB is printed"

Test Case 7 (Generating with a Seed, aka Reproducible List)
>> python -m linked_cli.cli --seed 42 -g 4

This will always generate the same 4 items every time seed 42 is used 

Test Case 8 (Generating with a Seed, and then sorting it via Ascending Order )
python -m linked_cli.cli --seed 42 -g 4 -o asc 

This will always generate the same 4 items every time seed 42 is used, while also sorting it in ascending order 

Test Case 9 (Generating with a Seed, sorting it via Ascending Order and searching for a particular ID)
>> python -m linked_cli.cli --seed 42 -g 4 -o asc -s evblAb (or any other name that was generated above in Test Case 8)

This will always generate the same 4 items every time seed 42 is used, while also sorting it in ascending order. Furthermore, it produces the Searched Item that was requested.

Test Case 10 (Overall Unit Test)
>> python -m unittest discover tests [Quick smoke-check that all tests pass, minimal output]
>> python -m unittest discover tests -v [See each test’s full name and status, helpful when diagnosing failures]

This does 11 unit tests that have been curated in one shot, while also reflecting how many have passed.


Test Case 11 (Overall Unit Test using pytest)
Pre-Requisite = There will be a need to "pip install pytest" first 
>> pytest [Standard run with rich assertion introspection; good for day-to-day work]
>> pytest -v [Show each test’s file/class/method name and outcome; good for detailed feedback]
>> pytest -q [Condensed pass/fail summary (no progress bar), ideal for CI logs]
>> pytest --maxfail=1 --disable-warnings -q [Stop on first failure, suppress warnings—perfect for fast-fail pipelines]

This does 11 unit tests that have been curated in one shot, while also reflecting how many have passed via pytest





